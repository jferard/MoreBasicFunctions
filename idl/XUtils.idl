/*
   MoreBasicFunctions - A LibreOffice Add-On written in Java that provides more basic functions.
   Copyright (C) 2021 Julien FÃ©rard.

   MoreBasicFunctions is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   MoreBasicFunctions is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
#ifndef INCLUDED_COM_GITHUB_JFERARD_MBFS_XUTILS
#define INCLUDED_COM_GITHUB_JFERARD_MBFS_XUTILS

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/beans/PropertyValue.idl>

module com { module github { module jferard { module mbfs {

/**
Provides various utility methods
*/
interface XUtils: ::com::sun::star::uno::XInterface {
    /**
    Return a representation of the class of this object.
    Useful to understand how LO maps a Basic object to a Java Object.

    Basic: 0
    */
    string debugBinding([in] any o);

    /**
    Return `true` if the string matches the extglob pattern (man 1 bash)

    Basic: 0
    */
    boolean glob([in] string str, [in] string pattern);

    /**
    Return a PropertyValue

    Basic: use `new com.sun.star.beans.PropertyValue` and then set the `Name` and `Value` fields.
    */
    ::com::sun::star::beans::PropertyValue makePV([in] string name, [in] any value);

    /**
    Return an array of PropertyValues

    Basic: use `new com.sun.star.beans.PropertyValue` and then set the `Name` and `Value` fields.
    */
    sequence<::com::sun::star::beans::PropertyValue> makePVs([in] sequence<any> namesAndValues);

    /**
    Return a byte from a string

    Basic: `Val`
    */
    byte parseByte([in] string number);

    /**
    Return a double from a string

    Basic: `Val`
    */
    double parseDouble([in] string number);

    /**
    Return a float from a string

    Basic: `Val`
    */
    float parseFloat([in] string number);

    /**
    Return a hyper (= long) from a string
    Does *not* work.

    Basic: `Val`
    */
    hyper parseHyper([in] string number);

    /**
    Return a long (= int) from a string

    Basic: `Val`
    */
    long parseLong([in] string number);

    /**
    Return a short from a string

    Basic: `Val`
    */
    short parseShort([in] string number);

};

}; }; }; };

#endif
