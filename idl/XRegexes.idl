/*
   MoreBasicFunctions - A LibreOffice Add-On written in Java that provides more basic functions.
   Copyright (C) 2021 Julien FÃ©rard.

   MoreBasicFunctions is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   MoreBasicFunctions is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
#ifndef INCLUDED_COM_GITHUB_JFERARD_MBFS_XREGEXES
#define INCLUDED_COM_GITHUB_JFERARD_MBFS_XREGEXES

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/container/XEnumeration.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>

module com { module github { module jferard { module mbfs {

/**
Provides methods to use regular expressions.
*/
interface XRegexes: ::com::sun::star::uno::XInterface {
    /**
    Return an array of all parts of the string matching the pattern.

    Basic: 0
    */
    sequence<string> findAll([in] string s, [in] string pattern);

    /**
    Return the first part of the string that matches the pattern

    Basic: 0
    */
    string findFirst([in] string s, [in] string pattern);

    /**
    Return `true` if the string matches the pattern

    Basic: ?
    */
    boolean match([in] string s, [in] string pattern);

    /**
    Return the string with the first match of the pattern replaced by replacement.
    Accepts back references.

    Basic: ?
    */
    string replaceFirst([in] string s, [in] string pattern, [in] string replacement);

    /**
    Return the string with all matches of the pattern replaced by replacement.
    Accepts back references.

    Basic: ?
    */
    string replaceAll([in] string s, [in] string pattern, [in] string replacement);

    /**
    Return an array of substring split on the pattern.

    Basic: `Split`
    */
    sequence<string> split([in] string s, [in] string pattern);
};

}; }; }; };

#endif
