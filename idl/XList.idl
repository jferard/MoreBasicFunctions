/*
   MoreBasicFunctions - A LibreOffice Add-On written in Java that provides more basic functions.
   Copyright (C) 2021 Julien FÃ©rard.

   MoreBasicFunctions is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   MoreBasicFunctions is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
#ifndef INCLUDED_COM_GITHUB_JFERARD_MBFS_XLIST
#define INCLUDED_COM_GITHUB_JFERARD_MBFS_XLIST

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/beans/IllegalTypeException.idl>
#include <com/sun/star/container/XIndexReplace.idl>
#include <com/sun/star/container/XEnumerationAccess.idl>
#include <com/sun/star/container/NoSuchElementException.idl>
#include <com/sun/star/lang/IndexOutOfBoundsException.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>
#include <com/sun/star/lang/WrappedTargetException.idl>
#include <com/sun/star/lang/WrappedTargetException.idl>

module com { module github { module jferard { module mbfs {

/**
A collection that grows automatically. Does not need to `ReDim Preserve`.
Internally, this is an array of Java `Object`s.

Basic: 0
*/
interface XList {
    /**
    Implement `XIndexReplace`
    */
    interface ::com::sun::star::container::XIndexReplace;
    /**
    Implement `XEnumerationAccess`
    */
    interface ::com::sun::star::container::XEnumerationAccess;

    /**
    Append an element to the current list
    */
    void append([in] any element)
            raises( ::com::sun::star::lang::IllegalArgumentException );

    /**
    Insert an element to the current list at the given index.
    */
    void insert([in] long pos, [in] any element)
            raises( ::com::sun::star::lang::IllegalArgumentException,
                    ::com::sun::star::lang::IndexOutOfBoundsException );

    /**
    Return the size of this list
    */
    long size();

    /**
    Return the element at the given position
    */
    any get([in] long pos)
            raises ( ::com::sun::star::lang::IndexOutOfBoundsException);

    /**
    Set the element at the given position
    */
    void set([in] long pos, [in] any element)
            raises( ::com::sun::star::lang::IllegalArgumentException,
                    ::com::sun::star::lang::IndexOutOfBoundsException );

    /**
    Take the last element of the list and return it.
    */
    any removeLast()
            raises ( ::com::sun::star::lang::IndexOutOfBoundsException);

    /**
    Append a collection to the list.
    */
    void appendCollection([in] any collection)
            raises( ::com::sun::star::lang::IllegalArgumentException,
                    ::com::sun::star::lang::IndexOutOfBoundsException,
                    ::com::sun::star::lang::WrappedTargetException,
                    ::com::sun::star::container::NoSuchElementException
                    );

    /**
    Return a copy of the elements of the list from `from` index to the end of the list.
    */
    XList subListFrom([in] long from)
            raises( ::com::sun::star::lang::IllegalArgumentException);

    /**
    Return a copy of the elements of the list from the start of the list to `to` index excluded.
    */
    XList subListTo([in] long to)
            raises( ::com::sun::star::lang::IllegalArgumentException);

    /**
    Return a copy of the elements of the list from `from` index to `to` index excluded.
    */
    XList subList([in] long from, [in] long to)
            raises( ::com::sun::star::lang::IllegalArgumentException);

    /**
    Return an array with the elements of the list. The size of the array is the exact size of the
    list.
    */
    sequence<any> toArray();
};

}; }; }; };

#endif
