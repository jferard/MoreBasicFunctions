REM  *****  BASIC  *****
REM MoreBasicFunctions - Java - UNO component that provides more basic functions.
REM Copyright (C) 2021 Julien FÃ©rard.

REM MoreBasicFunctions is free software: you can redistribute it and/or modify
REM it under the terms of the GNU General Public License as published by
REM the Free Software Foundation, either version 3 of the License, or
REM (at your option) any later version.

REM MoreBasicFunctions is distributed in the hope that it will be useful,
REM but WITHOUT ANY WARRANTY; without even the implied warranty of
REM MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
REM GNU General Public License for more details.

REM You should have received a copy of the GNU General Public License
REM along with this program.  If not, see <https://www.gnu.org/licenses/>.

Option Explicit

Sub MBFSTestSuite()
	Dim Tests as Variant

    Tests = createUNOService("com.github.jferard.mbfs.Tests")
    TestsTestSuite(Tests)
    StringsTestSuite(Tests)
    CharactersTestSuite(Tests)
    RegexesTestSuite(Tests)
    ListTestSuite(Tests)
    CollectionsTestSuite(Tests)
    DatesTestSuite(Tests)
    CellsTestSuite(Tests)
    UtilsTestSuite(Tests)
    Tests.check()
    MsgBox Tests.message()
End Sub

Sub TestsTestSuite(Optional Tests as Variant)
	Dim TestsAssertTrue, TestsAssertFalse, TestsAssertEquals, TestsAssertArrayEquals, TestsAssertNotEquals, TestsAssertArrayNotEquals  as Variant

	If IsMissing(Tests) Then
	    Tests = createUNOService("com.github.jferard.mbfs.Tests")
	End If

	TestsAssertTrue = createUNOService("com.github.jferard.mbfs.Tests")
	TestsAssertTrue.assertTrue("true is true", True)
	TestsAssertTrue.assertTrue("false is not true", False)
	Tests.assertEquals("TestsAssertTrue errors", 1, TestsAssertTrue.errors())
	Tests.assertEquals("TestsAssertTrue message", "Failure: 1/2" & chr(10) & "false is not true: expected True", TestsAssertTrue.message())

	TestsAssertFalse = createUNOService("com.github.jferard.mbfs.Tests")
	TestsAssertFalse.assertFalse("true is not false", True)
	TestsAssertFalse.assertFalse("false is false", False)
	Tests.assertEquals("TestsAssertFalse errors", 1, TestsAssertFalse.errors())
	Tests.assertEquals("TestsAssertFalse message", "Failure: 1/2" & chr(10) & "true is not false: expected False", TestsAssertFalse.message())

	TestsAssertEquals = createUNOService("com.github.jferard.mbfs.Tests")
	TestsAssertEquals.assertEquals("1 eq 1", 1, 1)
	TestsAssertEquals.assertDoubleEquals("x eq x", 44283.500001, 44283.5, 0.001)
	TestsAssertEquals.assertEquals("2 neq 1", 1, 2)
	Tests.assertEquals("TestsAssertEquals errors", 1, TestsAssertEquals.errors())
	Tests.assertEquals("TestsAssertEquals message", "Failure: 1/3" & chr(10) & "2 neq 1: objects `1` and `2` are not equal", TestsAssertEquals.message())

	TestsAssertArrayEquals = createUNOService("com.github.jferard.mbfs.Tests")
	TestsAssertArrayEquals.assertArrayEquals("[1] eq [1]", Array(1), Array(1))
	TestsAssertArrayEquals.assertArrayEquals("[2] neq [1]", Array(1), Array(2))
	TestsAssertArrayEquals.assertArrayEquals("[1, 2] neq [1]", Array(1), Array(1, 2))
	Tests.assertEquals("TestsAssertArrayEquals errors", 2, TestsAssertArrayEquals.errors())
	Tests.assertEquals("TestsAssertArrayEquals message", "Failure: 2/3" & chr(10) & "[2] neq [1]: arrays `[1]` and `[2]` are not equal" & chr(10) & "[1, 2] neq [1]: arrays `[1]` and `[1, 2]` are not equal", TestsAssertArrayEquals.message())

	TestsAssertNotEquals = createUNOService("com.github.jferard.mbfs.Tests")
	TestsAssertNotEquals.assertNotEquals("foo is foo", "foo", "foo")
	TestsAssertNotEquals.assertNotEquals("foo is not bar", "foo", "bar")
	Tests.assertEquals("TestsAssertNotEquals errors", 1, TestsAssertNotEquals.errors())
	Tests.assertEquals("TestsAssertNotEquals message", "Failure: 1/2" & chr(10) & "foo is foo: objects `foo` and `foo` are equal", TestsAssertNotEquals.message())

	TestsAssertArrayNotEquals = createUNOService("com.github.jferard.mbfs.Tests")
	TestsAssertArrayNotEquals.assertArrayNotEquals("[1] eq [1]", Array(1), Array(1))
	TestsAssertArrayNotEquals.assertArrayNotEquals("[2] neq [1]", Array(1), Array(2))
	TestsAssertArrayNotEquals.assertArrayNotEquals("[1, 2] neq [1]", Array(1), Array(1, 2))
	Tests.assertEquals("TestsAssertArrayNotEquals errors", 1, TestsAssertArrayNotEquals.errors())
	Tests.assertEquals("TestsAssertArrayEquals message", "Failure: 1/3" & chr(10) & "[1] eq [1]: arrays `[1]` and `[1]` are equal", TestsAssertArrayNotEquals.message())


    Tests.check()
End Sub

Sub StringsTestSuite(Optional Tests as Variant)
	Dim Strings as Variant
	Dim enumeration as Variant

	If IsMissing(Tests) Then
	    Tests = createUNOService("com.github.jferard.mbfs.Tests")
	End If

    Strings = com.github.jferard.mbfs.Strings.createWithLocale("en_US")

    Tests.assertEquals("charAt", "B", Strings.charAt("MoreBasicFunctions", 4))
    Tests.assertEquals("charAt -1", "s", Strings.charAt("MoreBasicFunctions", -1))

    Tests.assertEquals("compare equal strings", Strings.compare("MoreBasicFunctions", "MoreBasicFunctions"), 0, )
    Tests.assertTrue("compare more", Strings.compare("MoreBasicFunctions", "MoreBasic") > 0)
    Tests.assertTrue("compare less", Strings.compare("MoreBasic", "MoreBasicFunctions") < 0)
    Tests.assertTrue("compare case sensitive", Strings.compare("A", "a") < 0)
    Tests.assertTrue("compare ignore case", Strings.compareIgnoreCase("A", "a") = 0)

    Tests.assertTrue("contains", Strings.containsIgnoreCase("MoreBasicFunctions", "BasiC"))
    Tests.assertFalse("does not contain", Strings.contains("MoreBasicFunctions", "Python"))

    Tests.assertTrue("endswith", Strings.endsWith("MoreBasicFunctions", "Functions"))
    Tests.assertFalse("does not end with", Strings.endsWith("MoreBasicFunctions", "Function"))
    Tests.assertFalse("does not end with case sensitive", Strings.endsWith("MoreBasicFunctions", "FUNCTIONS"))
    Tests.assertTrue("ends with case ignore case", Strings.endsWithIgnoreCase("MoreBasicFunctions", "FUNCTIONS"))

	enumeration = Strings.enumerate("MoreBasicFunctions")
	Tests.assertTrue("first char exists", enumeration.hasMoreElements())
	Tests.assertEquals("first char", CreateUNOValue("char", "M"), enumeration.nextElement())
	Tests.assertTrue("second char exists", enumeration.hasMoreElements())
	Tests.assertEquals("first char", CreateUNOValue("char", "o"), enumeration.nextElement())
	enumeration = Strings.enumerate("")
	Tests.assertFalse("no first char exists", enumeration.hasMoreElements())

	Tests.assertEquals("format string", "MoreBasicFunctions", Strings.format("More%s%s", Array("Basic", "Functions")))

	Tests.assertEquals("indexOf", 4, Strings.indexOf("MoreBasicFunctions", "Basic"))
	Tests.assertEquals("indexOf case sensitive", -1, Strings.indexOf("MoreBasicFunctions", "BASIC"))
	Tests.assertEquals("indexOf ignore case", 4, Strings.indexOfIgnoreCase("MoreBasicFunctions", "BASIC"))

	Tests.assertEquals("insert", "MoreBasicFunctions", Strings.insert("MoreFunctions", "Basic", 4))

	Tests.assertEquals("join", "More-Basic-Functions", Strings.join(Array("More", "Basic", "Functions"), "-"))

	Tests.assertEquals("lastIndexOf", 14, Strings.lastIndexOf("MoreBasicFunctions", "i"))
	Tests.assertEquals("lastIndexOf case sensitive", -1, Strings.lastIndexOf("MoreBasicFunctions", "I"))
	Tests.assertEquals("lastIndexOf ignore case", 14, Strings.lastIndexOfIgnoreCase("MoreBasicFunctions", "I"))

	Tests.assertEquals("lower", "morebasicfunctions", Strings.lower("MoreBasicFunctions"))

	Tests.assertEquals("padLeft", "0000012345", Strings.padLeft("12345", "0", 10))
	Tests.assertEquals("padRight", "1234500000", Strings.padRight("12345", "0", 10))

    Tests.assertEquals("replace", "MoreBasicFunctions", Strings.replace("MoreJavaFunctions", "Java", "Basic"))

    Tests.assertEquals("reversed", Strings.reversed("MoreBasicFunctions"), "snoitcnuFcisaBeroM")

    Tests.assertArrayEquals("split", Array("More", "Basic", "Functions"), Strings.split("More-Basic-Functions", "-"))

    Tests.assertTrue("startsWith", Strings.startsWith("MoreBasicFunctions", "More"))
    Tests.assertFalse("startsWith case sensitive", Strings.startsWith("MoreBasicFunctions", "MORE"))
    Tests.assertTrue("startsWith ignore case", Strings.startsWithIgnoreCase("MoreBasicFunctions", "MORE"))

    Tests.assertEquals("substring 48", "Basi", Strings.substring("MoreBasicFunctions", 4, 8))
    Tests.assertEquals("substring 4-8", "BasicF", Strings.substring("MoreBasicFunctions", 4, -8))
    Tests.assertEquals("substring -14-9", "Basic", Strings.substring("MoreBasicFunctions", -14, -9))

    Tests.assertEquals("substringFrom4", "BasicFunctions", Strings.substringFrom("MoreBasicFunctions", 4))
    Tests.assertEquals("substringFrom-9", "Functions", Strings.substringFrom("MoreBasicFunctions", -9))

    Tests.assertEquals("substringTo9", "MoreBasic", Strings.substringTo("MoreBasicFunctions", 9))
    Tests.assertEquals("substringTo-1", "MoreBasicFunction", Strings.substringTo("MoreBasicFunctions", -1))

	Tests.assertEquals("trim", "12345", Strings.trim("0001234500", "0"))
	Tests.assertEquals("trimLeft", "1234500", Strings.trimLeft("0001234500", "0"))
	Tests.assertEquals("trimRight", "00012345", Strings.trimRight("0001234500", "0"))

	Tests.assertEquals("trimSpaces", "12345", Strings.trimSpaces("   12345  "))
	Tests.assertEquals("trimLeftSpaces", "12345  ", Strings.trimLeftSpaces("   12345  "))
	Tests.assertEquals("trimRightSpaces", "   12345", Strings.trimRightSpaces("   12345  "))

	Tests.assertEquals("upper", "MOREBASICFUNCTIONS", Strings.upper("MoreBasicFunctions"))
    Tests.check()
End Sub

Sub CharactersTestSuite(Optional Tests as Variant)
	Dim Characters as Variant

	If IsMissing(Tests) Then
	    Tests = createUNOService("com.github.jferard.mbfs.Tests")
	End If

	Characters = CreateUNOService("com.github.jferard.mbfs.Characters")
	Tests.assertTrue("isChar `a`", Characters.isChar("a"))
	Tests.assertFalse("isChar `abc`", Characters.isChar("abc"))

	Tests.assertTrue("isLetter `a`", Characters.isLetter("a"))
	Tests.assertFalse("isLetter `,`", Characters.isLetter(","))

	Tests.assertFalse("isDigit `a`", Characters.isDigit("a"))
	Tests.assertTrue("isDigit`0`", Characters.isDigit("0"))

	Tests.assertFalse("isSpace `a`", Characters.isSpace("a"))
	Tests.assertTrue("isSpace ` `", Characters.isSpace(" "))
	Tests.assertTrue("isSpace `\n`", Characters.isSpace(Chr(10)))

	Tests.assertFalse("isUpperCase `a`", Characters.isUpperCase("a"))
	Tests.assertTrue("isUpperCase `A`", Characters.isUpperCase("A"))

	Tests.assertFalse("isPunctuation `a`", Characters.isPunctuation("a"))
	Tests.assertTrue("isPunctuation `.`", Characters.isPunctuation("."))

	On Error Goto ErrLetter
	Characters.isLetter("abc")
	Tests.assertEquals("isLetter `abc` should raise an error", 1, 0)

    ErrLetter:
    Tests.check()
End Sub

Sub RegexesTestSuite(Optional Tests as Variant)
	Dim Regexes as Variant
	Dim enumeration as Variant

	If IsMissing(Tests) Then
	    Tests = createUNOService("com.github.jferard.mbfs.Tests")
	End If

    Regexes = CreateUNOService("com.github.jferard.mbfs.Regexes")
	Tests.assertArrayEquals("findAll", Array("123", "456", "789"), Regexes.findAll("   123456789  ", "\d{3}"))
	Tests.assertEquals("findFirst", "123", Regexes.findFirst("   123456789  ", "\d{3}"))
	Tests.assertTrue("match", Regexes.match("   12345  ", "^\s+\d+\s+$"))
	Tests.assertEquals("replaceAll", "   DDD  ", Regexes.replaceAll("   123456789  ", "\d{3}", "D"))
	Tests.assertEquals("replaceFirst", "   D456789  ", Regexes.replaceFirst("   123456789  ", "\d{3}", "D"))
	Tests.assertArrayEquals("split", Array("", "1", "23", "456", "78", "9"), Regexes.split(" 1 23   456   78 9   ", "\s+"))

    Tests.check()
End Sub

Sub ListTestSuite(Optional Tests as Variant)
	Dim stringList, longList, secondStringList as Variant
	Dim enumeration as Variant
	Dim i as Integer

	If IsMissing(Tests) Then
	    Tests = createUNOService("com.github.jferard.mbfs.Tests")
	End If

    stringList = com.github.jferard.mbfs.List.create("string")
    Tests.assertEquals("empty stringList size", 0, stringList.size())
    stringList.append("foo")
    Tests.assertEquals("one element stringList size", 1, stringList.size())
    Tests.assertEquals("first element stringList", "foo", stringList.get(0))

    longList = com.github.jferard.mbfs.List.create("long")
    longList.append(1)
    Tests.assertEquals("one element longList size", 1, longList.size())
    Tests.assertEquals("first element longList", 1, longList.get(0))

    stringList = com.github.jferard.mbfs.List.fromArray("string", Array("More", "Basic", "Functions"))
    Tests.assertEquals("first element fromArray", "More", stringList.get(0))

    secondStringList = com.github.jferard.mbfs.List.fromIndexed("string", stringList)
    Tests.assertEquals("first element fromIndexed", "More", secondStringList.get(0))
    Tests.assertEquals("second element fromIndexed", "Basic", secondStringList.get(1))
    Tests.assertEquals("third element fromIndexed", "Functions", secondStringList.get(2))
    Tests.assertEquals("size fromIndexed", 3, secondStringList.size())


    secondStringList = com.github.jferard.mbfs.List.fromEnumerable("string", stringList)
    Tests.assertEquals("first element fromEnumerable", "More", secondStringList.get(0))
    Tests.assertEquals("second element fromEnumerable", "Basic", secondStringList.get(1))
    Tests.assertEquals("third element fromEnumerable", "Functions", secondStringList.get(2))
    Tests.assertEquals("size fromEnumerable", 3, secondStringList.size())

    enumeration = stringList.createEnumeration()
    secondStringList = com.github.jferard.mbfs.List.fromEnumeration("string", enumeration)
    Tests.assertEquals("first element fromEnumeration", "More", secondStringList.get(0))
    Tests.assertEquals("second element fromEnumeration", "Basic", secondStringList.get(1))
    Tests.assertEquals("third element fromEnumeration", "Functions", secondStringList.get(2))
    Tests.assertEquals("size fromEnumeration", 3, secondStringList.size())

	Tests.assertEquals("remove `Functions`", "Functions", secondStringList.removeLast())
	Tests.assertEquals("remove `Basic`", "Basic", secondStringList.removeLast())
	Tests.assertEquals("[More] size", 1, secondStringList.size())
	secondStringList.append("And")
	Tests.assertEquals("get `And`", "And", secondStringList.get(1))
	secondStringList.appendCollection(stringList)
	Tests.assertEquals("[More, And, More, Basic, Functions] size", 5, secondStringList.size())
	Tests.assertArrayEquals("[More, And, More, Basic, Functions] toArray", Array("More", "And", "More", "Basic", "Functions"), secondStringList.toArray())

	secondStringList = com.github.jferard.mbfs.List.create("string")
	For i=0 To 100
		secondStringList.appendCollection(stringList)
	Next i
	Tests.assertEquals("Test long list", 303, secondStringList.size())

	Tests.assertArrayEquals("sublistFrom 1", Array("Basic", "Functions"), stringList.sublistFrom(1).toArray())
	Tests.assertArrayEquals("sublistFrom -1", Array("Functions"), stringList.sublistFrom(-1).toArray())
	Tests.assertArrayEquals("sublistTo 1", Array("More"), stringList.sublistTo(1).toArray())
	Tests.assertArrayEquals("sublistTo -1", Array("More", "Basic"), stringList.sublistTo(-1).toArray())
	Tests.assertArrayEquals("sublist 1 -1", Array("Basic"), stringList.sublist(1, -1).toArray())

    Tests.check()
End Sub

Sub CollectionsTestSuite(Optional Tests as Variant)
	Dim Collections as Variant

	If IsMissing(Tests) Then
	    Tests = createUNOService("com.github.jferard.mbfs.Tests")
	End If

    Collections = createUNOService("com.github.jferard.mbfs.Collections")
    Tests.assertArrayEquals("sort small ints", Array(1, 2, 3), Collections.sort(Array(2, 3, 1)))
    Tests.assertEquals("shuffle small ints 1", 0, LBound(Collections.shuffle(Array(2, 3, 1))))
    Tests.assertEquals("shuffle small ints 2", 2, UBound(Collections.shuffle(Array(2, 3, 1))))
    Tests.assertEquals("max", 3, Collections.max(Array(2, 3, 1)))
    Tests.assertEquals("min", 1, Collections.min(Array(2, 3, 1)))
    Tests.assertEquals("avg", 2.8, Collections.avg(Array(2, 3, 1, 7, -5)))
    Tests.check()
End Sub

Sub DatesTestSuite(Optional Tests as Variant)
	Dim Dates as Variant

	If IsMissing(Tests) Then
	    Tests = createUNOService("com.github.jferard.mbfs.Tests")
	End If

    Dates = createUNOService("com.github.jferard.mbfs.Dates")
    Tests.assertEquals("date", 44283, Dates.date(2021, 3, 28))
    Tests.assertDoubleEquals("datetime 1", 44283.78191318287, Dates.datetime(2021, 3, 28, 18, 45, 57.3), 0.001)
    Tests.assertDoubleEquals("datetime 2", 44200.5, Dates.datetime(2021, 1, 4, 12, 0, 0), 0.001)
    Tests.assertEquals("strftime 1", "2021-03-28T18:45:56", Dates.strftime(44283.7819, "yyyy-MM-dd'T'HH:mm:ss"))
    Tests.assertEquals("strftime 2", "2021-01-24T12:00:00", Dates.strftime(44220.5, "yyyy-MM-dd'T'HH:mm:ss"))
    Tests.assertDoubleEquals("strptime 1", 44283.86523148148, Dates.strptime("2021-03-28T20:45:56", "yyyy-MM-dd'T'HH:mm:ss"), 0.001)
    Tests.assertDoubleEquals("strptime 2", 44220.5, Dates.strptime("2021-01-24T12:00:00", "yyyy-MM-dd'T'HH:mm:ss"), 0.001)

    Tests.check()
End Sub

Sub PathsTestSuite(Optional Tests as Variant)
	Dim Paths as Variant
	Dim aPath as String
	Dim anArray as Variant

	aPath = "MoreBasicFunctions" & GetPathSeparator & "src" & GetPathSeparator & "main" & GetPathSeparator & "java" & GetPathSeparator & "com" & GetPathSeparator & "github" & GetPathSeparator & "jferard" & GetPathSeparator & "mbfs" & GetPathSeparator & "MoreBasicFunctions.java"
	anArray = Array("MoreBasicFunctions", "src", "main", "java", "com", "github", "jferard", "mbfs", "MoreBasicFunctions.java")

	If IsMissing(Tests) Then
	    Tests = createUNOService("com.github.jferard.mbfs.Tests")
	End If

    Paths = createUNOService("com.github.jferard.mbfs.Paths")
    Tests.assertEquals("concat", "MoreBasicFunctions" & GetPathSeparator & "README.md", Paths.concat("MoreBasicFunctions", "README.md"))
    Tests.assertTrue("exists", Paths.exists("."))
    Tests.assertEquals("extension", ".oxt", Paths.extension("MoreBasicFunctions.oxt"))
    Tests.assertEquals("no extension", "", Paths.extension("MoreBasicFunctions"))
    Tests.assertEquals("two extensions", ".zip", Paths.extension("MoreBasicFunctions.oxt.zip"))
    Tests.assertTrue("isDir", Paths.isDir("."))
    Tests.assertFalse("isDir", Paths.isFile("."))
    Tests.assertEquals("join", aPath, Paths.join(anArray))
    Tests.assertEquals("name", "bar.baz", Paths.name("foo" & GetPathSeparator & "bar.baz"))
    Tests.assertEquals("parent", "foo", Paths.parent("foo" & GetPathSeparator & "bar.baz"))
    Tests.assertArrayEquals("split", anArray, Paths.split(aPath))
    Tests.assertEquals("stem", "foo" & GetPathSeparator & "bar", Paths.stem("foo" & GetPathSeparator & "bar.baz"))
    Tests.assertEquals("with empty extension", "MoreBasicFunctions.oxt", Paths.withExtension("MoreBasicFunctions.oxt.zip", ""))
    Tests.assertEquals("with extension", "MoreBasicFunctions.oxt.tar", Paths.withExtension("MoreBasicFunctions.oxt.zip", ".tar"))
    Tests.check()
End Sub


Sub CellsTestSuite(Optional Tests as Variant)
	Dim Cells as Variant

	If IsMissing(Tests) Then
	    Tests = createUNOService("com.github.jferard.mbfs.Tests")
	End If

    Cells = createUNOService("com.github.jferard.mbfs.Cells")
    Tests.assertEquals("0 -> `A`", "A", Cells.alphabeticCol(0))
    Tests.assertEquals("25 -> `Z`", "Z", Cells.alphabeticCol(25))
    Tests.assertEquals("26 -> `AA`", "AA", Cells.alphabeticCol(26))
    Tests.assertEquals("51 -> `AZ`", "AZ", Cells.alphabeticCol(51))
    Tests.assertEquals("52 -> `BA`", "BA", Cells.alphabeticCol(52))
    Tests.assertEquals("1023 -> `AMJ`", "AMJ", Cells.alphabeticCol(1023))

    Tests.assertEquals("`A` -> 0", Cells.numericCol("A"), 0)
    Tests.assertEquals("`Z` -> 25", Cells.numericCol("Z"), 25)
    Tests.assertEquals("`AA` -> 26", Cells.numericCol("AA"), 26)
    Tests.assertEquals("`AZ` -> 51", Cells.numericCol("AZ"), 51)
    Tests.assertEquals("`BA` -> 52", Cells.numericCol("BA"), 52)
    Tests.assertEquals("`AMJ` -> 1023", Cells.numericCol("AMJ"), 1023)
    Tests.check()
End Sub

Sub UtilsTestSuite(Optional Tests as Variant)
	Dim Utils as Variant
	Dim pvs as Variant

	If IsMissing(Tests) Then
	    Tests = createUNOService("com.github.jferard.mbfs.Tests")
	End If

    Utils = createUNOService("com.github.jferard.mbfs.Utils")
    pvs = Utils.makePVs(Array("name1", 1, "name2", 2))
    Tests.assertEquals("pv0.name", "name1", pvs(0).Name)
    Tests.assertEquals("pv0.value", 1, pvs(0).Value)
    Tests.assertEquals("pv1.name", "name2", pvs(1).Name)
    Tests.assertEquals("pv1.value", 2, pvs(1).Value)
    Tests.assertEquals("pvs from", 0, Lbound(pvs))
    Tests.assertEquals("pvs to ", 1, Ubound(pvs))

    Tests.check()
End Sub