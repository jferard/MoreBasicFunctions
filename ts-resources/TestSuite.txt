REM  *****  BASIC  *****
REM MoreBasicFunctions - Java - UNO component that provides more basic functions.
REM Copyright (C) 2021 Julien FÃ©rard.

REM MoreBasicFunctions is free software: you can redistribute it and/or modify
REM it under the terms of the GNU General Public License as published by
REM the Free Software Foundation, either version 3 of the License, or
REM (at your option) any later version.

REM MoreBasicFunctions is distributed in the hope that it will be useful,
REM but WITHOUT ANY WARRANTY; without even the implied warranty of
REM MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
REM GNU General Public License for more details.

REM You should have received a copy of the GNU General Public License
REM along with this program.  If not, see <https://www.gnu.org/licenses/>.

Option Explicit

Sub MBFSTestSuite()
	Dim Tests as Variant

    Tests = createUNOService("com.github.jferard.mbfs.Tests")
    TestsTestSuite(Tests)
    StringsTestSuite(Tests)
    Tests.check()
    MsgBox Tests.message()
End Sub

Sub TestsTestSuite(Optional Tests as Variant)
	Dim TestsAssertTrue, TestsAssertFalse, TestsAssertEquals, TestsAssertArrayEquals, TestsAssertNotEquals, TestsAssertArrayNotEquals  as Variant

	If IsMissing(Tests) Then
	    Tests = createUNOService("com.github.jferard.mbfs.Tests")
	End If

	TestsAssertTrue = createUNOService("com.github.jferard.mbfs.Tests")
	TestsAssertTrue.assertTrue("true is true", True)
	TestsAssertTrue.assertTrue("false is not true", False)
	Tests.assertEquals("TestsAssertTrue errors", 1, TestsAssertTrue.errors())
	Tests.assertEquals("TestsAssertTrue message", "Failure: 1/2" & chr(10) & "false is not true: expected True", TestsAssertTrue.message())

	TestsAssertFalse = createUNOService("com.github.jferard.mbfs.Tests")
	TestsAssertFalse.assertFalse("true is not false", True)
	TestsAssertFalse.assertFalse("false is false", False)
	Tests.assertEquals("TestsAssertFalse errors", 1, TestsAssertFalse.errors())
	Tests.assertEquals("TestsAssertFalse message", "Failure: 1/2" & chr(10) & "true is not false: expected False", TestsAssertFalse.message())

	TestsAssertEquals = createUNOService("com.github.jferard.mbfs.Tests")
	TestsAssertEquals.assertEquals("1 eq 1", 1, 1)
	TestsAssertEquals.assertEquals("2 neq 1", 1, 2)
	Tests.assertEquals("TestsAssertEquals errors", 1, TestsAssertEquals.errors())
	Tests.assertEquals("TestsAssertEquals message", "Failure: 1/2" & chr(10) & "2 neq 1: objects `1` and `2` are not equal", TestsAssertEquals.message())

	TestsAssertArrayEquals = createUNOService("com.github.jferard.mbfs.Tests")
	TestsAssertArrayEquals.assertArrayEquals("[1] eq [1]", Array(1), Array(1))
	TestsAssertArrayEquals.assertArrayEquals("[2] neq [1]", Array(1), Array(2))
	TestsAssertArrayEquals.assertArrayEquals("[1, 2] neq [1]", Array(1), Array(1, 2))
	Tests.assertEquals("TestsAssertArrayEquals errors", 2, TestsAssertArrayEquals.errors())
	Tests.assertEquals("TestsAssertArrayEquals message", "Failure: 2/3" & chr(10) & "[2] neq [1]: arrays `[1]` and `[2]` are not equal" & chr(10) & "[1, 2] neq [1]: arrays `[1]` and `[1, 2]` are not equal", TestsAssertArrayEquals.message())

	TestsAssertNotEquals = createUNOService("com.github.jferard.mbfs.Tests")
	TestsAssertNotEquals.assertNotEquals("foo is foo", "foo", "foo")
	TestsAssertNotEquals.assertNotEquals("foo is not bar", "foo", "bar")
	Tests.assertEquals("TestsAssertNotEquals errors", 1, TestsAssertNotEquals.errors())
	Tests.assertEquals("TestsAssertNotEquals message", "Failure: 1/2" & chr(10) & "foo is foo: objects `foo` and `foo` are equal", TestsAssertNotEquals.message())

	TestsAssertArrayNotEquals = createUNOService("com.github.jferard.mbfs.Tests")
	TestsAssertArrayNotEquals.assertArrayNotEquals("[1] eq [1]", Array(1), Array(1))
	TestsAssertArrayNotEquals.assertArrayNotEquals("[2] neq [1]", Array(1), Array(2))
	TestsAssertArrayNotEquals.assertArrayNotEquals("[1, 2] neq [1]", Array(1), Array(1, 2))
	Tests.assertEquals("TestsAssertArrayNotEquals errors", 1, TestsAssertArrayNotEquals.errors())
	Tests.assertEquals("TestsAssertArrayEquals message", "Failure: 1/3" & chr(10) & "[1] eq [1]: arrays `[1]` and `[1]` are equal", TestsAssertArrayNotEquals.message())


    Tests.check()
End Sub

Sub StringsTestSuite(Optional Tests as Variant)
	Dim Strings as Variant
	Dim enumeration as Variant

	If IsMissing(Tests) Then
	    Tests = createUNOService("com.github.jferard.mbfs.Tests")
	End If

    Strings = createUNOService("com.github.jferard.mbfs.Strings")

    Tests.assertEquals("compare equal strings", Strings.compare("MoreBasicFunctions", "MoreBasicFunctions"), 0, )
    Tests.assertTrue("compare more", Strings.compare("MoreBasicFunctions", "MoreBasic") > 0)
    Tests.assertTrue("compare less", Strings.compare("MoreBasic", "MoreBasicFunctions") < 0)
    Tests.assertTrue("compare case sensitive", Strings.compare("A", "a") < 0)
    Tests.assertTrue("compare ignore case", Strings.compareIgnoreCase("A", "a") = 0)

    Tests.assertTrue("contains", Strings.containsIgnoreCase("MoreBasicFunctions", "BasiC"))
    Tests.assertFalse("does not contain", Strings.contains("MoreBasicFunctions", "Python"))

    Tests.assertTrue("endswith", Strings.endsWith("MoreBasicFunctions", "Functions"))
    Tests.assertFalse("does not end with", Strings.endsWith("MoreBasicFunctions", "Function"))
    Tests.assertFalse("does not end with case sensitive", Strings.endsWith("MoreBasicFunctions", "FUNCTIONS"))
    Tests.assertTrue("ends with case ignore case", Strings.endsWithIgnoreCase("MoreBasicFunctions", "FUNCTIONS"))

	enumeration = Strings.enumerate("MoreBasicFunctions")
	Tests.assertTrue("first char exists", enumeration.hasMoreElements())
	Tests.assertEquals("first char", CreateUNOValue("char", "M"), enumeration.nextElement())
	Tests.assertTrue("second char exists", enumeration.hasMoreElements())
	Tests.assertEquals("first char", CreateUNOValue("char", "o"), enumeration.nextElement())
	enumeration = Strings.enumerate("")
	Tests.assertFalse("no first char exists", enumeration.hasMoreElements())

	Tests.assertEquals("format string", "MoreBasicFunctions", Strings.format("More%s%s", Array("Basic", "Functions")))

	Tests.assertEquals("indexOf", 4, Strings.indexOf("MoreBasicFunctions", "Basic"))
	Tests.assertEquals("indexOf case sensitive", -1, Strings.indexOf("MoreBasicFunctions", "BASIC"))
	Tests.assertEquals("indexOf ignore case", 4, Strings.indexOfIgnoreCase("MoreBasicFunctions", "BASIC"))

	Tests.assertEquals("insert", "MoreBasicFunctions", Strings.insert("MoreFunctions", "Basic", 4))

	Tests.assertEquals("join", "More-Basic-Functions", Strings.join(Array("More", "Basic", "Functions"), "-"))

	Tests.assertEquals("lastIndexOf", 14, Strings.lastIndexOf("MoreBasicFunctions", "i"))
	Tests.assertEquals("lastIndexOf case sensitive", -1, Strings.lastIndexOf("MoreBasicFunctions", "I"))
	Tests.assertEquals("lastIndexOf ignore case", 14, Strings.lastIndexOfIgnoreCase("MoreBasicFunctions", "I"))

	Tests.assertEquals("lower", "morebasicfunctions", Strings.lower("MoreBasicFunctions"))

	Tests.assertEquals("padLeft", "0000012345", Strings.padLeft("12345", "0", 10))
	Tests.assertEquals("padRight", "1234500000", Strings.padRight("12345", "0", 10))

    Tests.assertEquals("replace", "MoreBasicFunctions", Strings.replace("MoreJavaFunctions", "Java", "Basic"))

    Tests.assertEquals("reversed", Strings.reversed("MoreBasicFunctions"), "snoitcnuFcisaBeroM")

    Tests.assertArrayEquals("split", Array("More", "Basic", "Functions"), Strings.split("More-Basic-Functions", "-"))

    Tests.assertTrue("startsWith", Strings.startsWith("MoreBasicFunctions", "More"))
    Tests.assertFalse("startsWith case sensitive", Strings.startsWith("MoreBasicFunctions", "MORE"))
    Tests.assertTrue("startsWith ignore case", Strings.startsWithIgnoreCase("MoreBasicFunctions", "MORE"))

	Tests.assertEquals("trim", "12345", Strings.trim("0001234500", "0"))
	Tests.assertEquals("trimLeft", "1234500", Strings.trimLeft("0001234500", "0"))
	Tests.assertEquals("trimRight", "00012345", Strings.trimRight("0001234500", "0"))

	Tests.assertEquals("trimSpaces", "12345", Strings.trimSpaces("   12345  "))
	Tests.assertEquals("trimLeftSpaces", "12345  ", Strings.trimLeftSpaces("   12345  "))
	Tests.assertEquals("trimRightSpaces", "   12345", Strings.trimRightSpaces("   12345  "))

	Tests.assertEquals("upper", "MOREBASICFUNCTIONS", Strings.upper("MoreBasicFunctions"))
    Tests.check()
End Sub