/*
   MoreBasicFunctions - A LibreOffice Add-On written in Java that provides more basic functions.
   Copyright (C) 2021 Julien FÃ©rard.

   MoreBasicFunctions is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   MoreBasicFunctions is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
#ifndef INCLUDED_COM_GITHUB_JFERARD_MBFS_XDATES
#define INCLUDED_COM_GITHUB_JFERARD_MBFS_XDATES

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/container/XEnumeration.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>

module com { module github { module jferard { module mbfs {

interface XDates: ::com::sun::star::uno::XInterface {
    /*
    Return a new date = date + count "unit"
    */
    double addToDate([in] long date, [in] long count, [in] string unit);

    /*
    Return a new datetime = datetime + count "unit"
    */
    double addToDatetime([in] double datetime, [in] long count, [in] string unit);

    /*
    Return a new time = time + count "unit"
    */
    double addToTime([in] double time, [in] long count, [in] string unit);

    /*
    Return a new date
    */
    long date([in] long year, [in] long month, [in] long day);

    /*
    Return a new datetime
    */
    double datetime([in] long year, [in] long month, [in] long day, [in] long hours, [in] long minutes, [in] double seconds);

    /*
    Return a new datetime = now
    */
    double now();

    /*
    Return a new formatted string.
    */
    string strftime([in] double datetime, [in] string format)
                raises( ::com::sun::star::lang::IllegalArgumentException);

    /*
    Parse str and returns a new datetime
    */
    double strptime([in] string str, [in] string format)
                raises( ::com::sun::star::lang::IllegalArgumentException);

    /*
    Return a new formatted time.
    */
    double time([in] long hours, [in] long minutes, [in] double seconds);

    /*
    Return the timestamp for this datetime.
    */
    hyper timestamp([in] double datetime);
};

}; }; }; };

#endif
