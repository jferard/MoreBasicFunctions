/*
   MoreBasicFunctions - A LibreOffice Add-On written in Java that provides more basic functions.
   Copyright (C) 2021 Julien FÃ©rard.

   MoreBasicFunctions is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   MoreBasicFunctions is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
#ifndef INCLUDED_COM_GITHUB_JFERARD_MBFS_XSTRINGS
#define INCLUDED_COM_GITHUB_JFERARD_MBFS_XSTRINGS

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/container/XEnumeration.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>

module com { module github { module jferard { module mbfs {

interface XStrings: ::com::sun::star::uno::XInterface {
    /**
    Return the char at a given position.
    */
    string charAt([in] string s, [in] long pos);

    /**
    Compare two strings and return an long that indicates their sort position
    */
    long compare([in] string s1, [in] string s2);

    /**
    Compare two strings and return an long that indicates their sort position
    */
    long compareIgnoreCase([in] string s1, [in] string s2);

    /**
    Return true if the first string contains the second
    */
    boolean contains([in] string haystack, [in] string needle);

    /**
    Return true if the first string contains the second
    */
    boolean containsIgnoreCase([in] string haystack, [in] string needle);

    /**
    Return true if the string ends with a a string
    */
    boolean endsWith([in] string s, [in] string e);

    /**
    Return true if the string ends with a a string
    */
    boolean endsWithIgnoreCase([in] string s, [in] string e);

    /**
    Create an enumeration
    */
    ::com::sun::star::container::XEnumeration enumerate([in] string s);

    /**
    Return a formatted string (%s)
    */
    string format([in] string formatString, [in] sequence<string> parameters);

    /**
    Return the index or -1
    */
    long indexOf([in] string haystack, [in] string needle);

    /**
    Return the index or -1
    */
    long indexOfIgnoreCase([in] string haystack, [in] string needle);

    /**
    Return a string with s2 inserted at given index.
    */
    string insert([in] string s, [in] string s2, [in] long index);

    /**
    Join a sequence of strings
    */
    string join([in] sequence<string> strings, [in] string delimiter);

    /**
    Return the index or -1
    */
    long lastIndexOf([in] string haystack, [in] string needle);

    /**
    Return the index or -1
    */
    long lastIndexOfIgnoreCase([in] string haystack, [in] string needle);

    /**
    Return a lower case string.
    */
    string lower([in] string s);

    /**
    Return a padded string.
    */
    string padLeft([in] string s, [in] string c, [in] long n)
            raises( ::com::sun::star::lang::IllegalArgumentException);

    /**
    Return a padded string.
    */
    string padRight([in] string s, [in] string c, [in] long n)
            raises( ::com::sun::star::lang::IllegalArgumentException);

    /**
    Return a string.
    */
    string replace([in] string s, [in] string before, [in] string after);

    /*
    Return the reversed string. E.g. `reversed("foo")` is `"oof"`
    */
    string reversed([in] string s);

    /**
    Split a string
    */
    sequence<string> split([in] string s, [in] string delimiter);

    /**
    Return true if the string ends with a a string
    */
    boolean startsWith([in] string s, [in] string e);

    /**
    Return true if the string ends with a a string
    */
    boolean startsWithIgnoreCase([in] string s, [in] string e);

    /**
    Return a substring, `to` is excluded.
    */
    string substring([in] string s, [in] long from, [in] long to);

    /**
    Return a substring.
    */
    string substringFrom([in] string s, [in] long from);

    /**
    Return a substring, `to` is excluded.
    */
    string substringTo([in] string s, [in] long to);

    /**
    Return a trimmed string.
    */
    string trim([in] string s, [in] string c)
            raises( ::com::sun::star::lang::IllegalArgumentException);

    /**
    Return a trimmed string.
    */
    string trimLeft([in] string s, [in] string c)
            raises( ::com::sun::star::lang::IllegalArgumentException);

    /**
    Return a trimmed string.
    */
    string trimRight([in] string s, [in] string c)
            raises( ::com::sun::star::lang::IllegalArgumentException);

    /**
    Return a trimmed string.
    */
    string trimSpaces([in] string s);

    /**
    Return a trimmed string.
    */
    string trimLeftSpaces([in] string s);

    /**
    Return a trimmed string.
    */
    string trimRightSpaces([in] string s);

    /**
    Return a upper case string.
    */
    string upper([in] string s);
};

}; }; }; };

#endif
